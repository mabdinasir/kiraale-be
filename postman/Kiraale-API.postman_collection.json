{
  "info": {
    "_postman_id": "12345678-1234-1234-1234-123456789abc",
    "name": "Kiraale Property Platform API",
    "description": "Complete API collection for Kiraale Property Platform - Property listing and management system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the API server is running and healthy"
          },
          "response": []
        }
      ],
      "description": "System health and status endpoints"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.environment.set(\"user_id\", response.data.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@kiraale.com\",\n  \"password\": \"SecurePass123@\",\n  \"mobile\": \"+252123456789\",\n  \"hasAcceptedTnC\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Register a new user account"
          },
          "response": []
        },
        {
          "name": "User Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.jwt) {",
                  "        pm.environment.set(\"jwt_token\", response.data.jwt);",
                  "    }",
                  "    if (response.data && response.data.id) {",
                  "        pm.environment.set(\"user_id\", response.data.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains JWT token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.jwt).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@kiraale.com\",\n  \"password\": \"SecurePass123@\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password to get JWT token"
          },
          "response": []
        },
        {
          "name": "User Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user and blacklist the JWT token"
          },
          "response": []
        },
        {
          "name": "Request Password Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@kiraale.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/request-password-reset",
              "host": ["{{base_url}}"],
              "path": ["auth", "request-password-reset"]
            },
            "description": "Request a password reset email"
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-here\",\n  \"newPassword\": \"NewSecurePass123@\",\n  \"confirmPassword\": \"NewSecurePass123@\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset password using the reset token"
          },
          "response": []
        }
      ],
      "description": "User authentication endpoints - registration, login, logout, password reset"
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains users array\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.data).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Get all users (requires USER_READ permission)"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Get user by ID (requires USER_READ permission)"
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"bio\": \"Updated bio for John Doe - Real Estate Professional\",\n  \"agencyName\": \"Kiraale Properties\",\n  \"agentNumber\": \"KP001\",\n  \"address\": \"Mogadishu, Somalia\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Update user profile (requires USER_WRITE permission)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains success message\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(true);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Delete user (requires USER_DELETE permission)"
          },
          "response": []
        }
      ],
      "description": "User management endpoints - CRUD operations for users"
    },
    {
      "name": "File Uploads",
      "item": [
        {
          "name": "Upload Profile Picture",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains profile picture URL\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('profilePicture');",
                  "    pm.expect(jsonData.data.profilePicture).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "path/to/your/profile-picture.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/users/profile-picture/upload",
              "host": ["{{base_url}}"],
              "path": ["users", "profile-picture", "upload"]
            },
            "description": "Upload user profile picture to AWS S3 (Max 5MB, Images only)"
          },
          "response": []
        }
      ],
      "description": "File upload endpoints - Profile pictures and media uploads"
    },
    {
      "name": "Properties",
      "item": [
        {
          "name": "Get All Properties",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains properties array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('properties');",
                  "    pm.expect(jsonData.data.properties).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response contains pagination info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/properties?page=1&limit=10&country=SOMALIA&propertyType=HOUSE",
              "host": ["{{base_url}}"],
              "path": ["properties"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "country",
                  "value": "SOMALIA"
                },
                {
                  "key": "propertyType",
                  "value": "HOUSE"
                },
                {
                  "key": "listingType",
                  "value": "SALE",
                  "disabled": true
                },
                {
                  "key": "minPrice",
                  "value": "50000",
                  "disabled": true
                },
                {
                  "key": "maxPrice",
                  "value": "500000",
                  "disabled": true
                },
                {
                  "key": "bedrooms",
                  "value": "3",
                  "disabled": true
                },
                {
                  "key": "bathrooms",
                  "value": "2",
                  "disabled": true
                },
                {
                  "key": "hasAirConditioning",
                  "value": "true",
                  "disabled": true
                }
              ]
            },
            "description": "Get all properties with filtering and pagination (Public endpoint)"
          },
          "response": []
        },
        {
          "name": "Get Property by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains property data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('property');",
                  "    pm.expect(jsonData.data.property).to.have.property('id');",
                  "    pm.expect(jsonData.data.property).to.have.property('title');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/properties/{{property_id}}",
              "host": ["{{base_url}}"],
              "path": ["properties", "{{property_id}}"]
            },
            "description": "Get property by ID (Public endpoint)"
          },
          "response": []
        },
        {
          "name": "Create Property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.property && response.data.property.id) {",
                  "        pm.environment.set(\"property_id\", response.data.property.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('property');",
                  "    pm.expect(jsonData.data.property).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Beautiful 3BR House in Mogadishu\",\n  \"description\": \"A stunning 3-bedroom house with modern amenities, perfect for families. Located in a secure neighborhood with easy access to schools and shopping centers.\",\n  \"propertyType\": \"HOUSE\",\n  \"listingType\": \"SALE\",\n  \"bedrooms\": 3,\n  \"bathrooms\": 2,\n  \"parkingSpaces\": 2,\n  \"landSize\": 500.0,\n  \"floorArea\": 250.0,\n  \"hasAirConditioning\": true,\n  \"address\": \"Hodan District, Mogadishu\",\n  \"country\": \"SOMALIA\",\n  \"price\": 150000,\n  \"priceType\": \"FIXED\",\n  \"availableFrom\": \"2024-01-01T00:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/properties",
              "host": ["{{base_url}}"],
              "path": ["properties"]
            },
            "description": "Create a new property listing (Requires authentication)"
          },
          "response": []
        },
        {
          "name": "Update Property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('property');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: Beautiful 3BR House in Mogadishu\",\n  \"description\": \"Updated description: A stunning 3-bedroom house with modern amenities and recent renovations.\",\n  \"price\": 160000,\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/properties/{{property_id}}",
              "host": ["{{base_url}}"],
              "path": ["properties", "{{property_id}}"]
            },
            "description": "Update property (Owner or Admin only)"
          },
          "response": []
        },
        {
          "name": "Delete Property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/properties/{{property_id}}",
              "host": ["{{base_url}}"],
              "path": ["properties", "{{property_id}}"]
            },
            "description": "Soft delete property (Owner or Admin only)"
          },
          "response": []
        }
      ],
      "description": "Property management endpoints - CRUD operations for property listings"
    },
    {
      "name": "Media Management",
      "item": [
        {
          "name": "Get All Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains media array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('media');",
                  "    pm.expect(jsonData.data.media).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/media?propertyId={{property_id}}&type=IMAGE&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["media"],
              "query": [
                {
                  "key": "propertyId",
                  "value": "{{property_id}}"
                },
                {
                  "key": "type",
                  "value": "IMAGE"
                },
                {
                  "key": "isPrimary",
                  "value": "true",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get media with filtering and pagination (Public endpoint)"
          },
          "response": []
        },
        {
          "name": "Get Media by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains media data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('media');",
                  "    pm.expect(jsonData.data.media).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/media/{{media_id}}",
              "host": ["{{base_url}}"],
              "path": ["media", "{{media_id}}"]
            },
            "description": "Get media by ID (Public endpoint)"
          },
          "response": []
        },
        {
          "name": "Upload Property Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.media && response.data.media.length > 0) {",
                  "        pm.environment.set(\"media_id\", response.data.media[0].id);",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains uploaded media\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('media');",
                  "    pm.expect(jsonData.data.media).to.be.an('array');",
                  "    pm.expect(jsonData.data).to.have.property('uploadedUrls');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "propertyId",
                  "value": "{{property_id}}",
                  "type": "text"
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": "path/to/your/property-image1.jpg"
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": "path/to/your/property-image2.jpg"
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": "path/to/your/property-image3.jpg"
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": "path/to/your/property-image4.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/media/upload",
              "host": ["{{base_url}}"],
              "path": ["media", "upload"]
            },
            "description": "Upload property media files to AWS S3 (First upload requires 4+ images, Max 15MB each)"
          },
          "response": []
        },
        {
          "name": "Create Media Record",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created media\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('media');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"{{property_id}}\",\n  \"type\": \"IMAGE\",\n  \"url\": \"https://example.com/media/sample-image.jpg\",\n  \"fileName\": \"sample-image.jpg\",\n  \"fileSize\": 1048576,\n  \"displayOrder\": 1,\n  \"isPrimary\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/media",
              "host": ["{{base_url}}"],
              "path": ["media"]
            },
            "description": "Create media record manually (Property owner or Admin only)"
          },
          "response": []
        },
        {
          "name": "Update Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated media\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('media');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"displayOrder\": 2,\n  \"isPrimary\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/media/{{media_id}}",
              "host": ["{{base_url}}"],
              "path": ["media", "{{media_id}}"]
            },
            "description": "Update media metadata (Property owner or Admin only)"
          },
          "response": []
        },
        {
          "name": "Delete Media Record",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/media/{{media_id}}",
              "host": ["{{base_url}}"],
              "path": ["media", "{{media_id}}"]
            },
            "description": "Delete media record only (Property owner or Admin only)"
          },
          "response": []
        },
        {
          "name": "Delete Media Files from S3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains deletion info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('deletedCount');",
                  "    pm.expect(jsonData.data).to.have.property('deletedIds');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mediaIds\": [\"{{media_id}}\"],\n  \"propertyId\": \"{{property_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/media/upload/delete",
              "host": ["{{base_url}}"],
              "path": ["media", "upload", "delete"]
            },
            "description": "Delete media files from both S3 and database (Property owner or Admin only)"
          },
          "response": []
        }
      ],
      "description": "Media management endpoints - CRUD operations for property media files"
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@kiraale.com\",\n  \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Test login with invalid credentials"
          },
          "response": []
        },
        {
          "name": "Duplicate Email Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@kiraale.com\",\n  \"password\": \"SecurePass123@\",\n  \"mobile\": \"+252987654321\",\n  \"hasAcceptedTnC\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Test registration with duplicate email"
          },
          "response": []
        },
        {
          "name": "Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"invalid-email-format\",\n  \"password\": \"SecurePass123@\",\n  \"mobile\": \"+252555666777\",\n  \"hasAcceptedTnC\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Test registration with invalid email format"
          },
          "response": []
        },
        {
          "name": "Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains authentication error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Test accessing protected route without authentication"
          },
          "response": []
        },
        {
          "name": "Invalid JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains token error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token.here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Test accessing protected route with invalid JWT token"
          },
          "response": []
        }
      ],
      "description": "Error scenarios and edge cases testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api",
      "type": "string"
    },
    {
      "key": "property_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "media_id",
      "value": "",
      "type": "string"
    }
  ]
}
